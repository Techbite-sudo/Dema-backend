// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Allergy struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type AuthPayload struct {
	Token string `json:"token"`
}

type Calories struct {
	Amount int `json:"amount"`
}

type CaloriesInput struct {
	Amount int `json:"amount"`
}

type Compound struct {
	Name   string `json:"name"`
	Amount int    `json:"amount"`
}

type CompoundInput struct {
	Name   string `json:"name"`
	Amount int    `json:"amount"`
}

type CreateEateryInput struct {
	Name           string   `json:"name"`
	Location       string   `json:"location"`
	Cuisine        string   `json:"cuisine"`
	ContactDetails string   `json:"contactDetails"`
	MenuItemIds    []string `json:"menuItemIds"`
}

type CreateFoodInput struct {
	ImageURL     string           `json:"imageUrl"`
	CommonName   string           `json:"commonName"`
	Description  string           `json:"description"`
	FoodGroup    string           `json:"foodGroup"`
	Calories     *CaloriesInput   `json:"calories"`
	OtherNames   []*FoodNameInput `json:"otherNames"`
	Sources      []*SourceInput   `json:"sources"`
	Compounds    []*CompoundInput `json:"compounds"`
	Nutrients    []*NutrientInput `json:"nutrients"`
	RegionsFound []string         `json:"regionsFound"`
	Category     string           `json:"category"`
	ServingSize  string           `json:"servingSize"`
	Verified     bool             `json:"verified"`
}

type CreateMealInput struct {
	DocName         string             `json:"docName"`
	ImageURL        string             `json:"imageUrl"`
	CommonName      string             `json:"commonName"`
	Description     string             `json:"description"`
	FoodIds         []string           `json:"foodIds"`
	OtherNames      []string           `json:"otherNames"`
	Recipe          []*RecipeStepInput `json:"recipe"`
	Ingredients     []*IngredientInput `json:"ingredients"`
	Cuisine         string             `json:"cuisine"`
	PreparationTime string             `json:"preparationTime"`
}

type Customer struct {
	ID             string    `json:"id"`
	Dob            time.Time `json:"dob"`
	Weight         int       `json:"weight"`
	Height         int       `json:"height"`
	FoodPreference string    `json:"foodPreference"`
	Allergies      []string  `json:"allergies,omitempty"`
	NumberOfMeals  int       `json:"numberOfMeals"`
	Meals          []string  `json:"meals"`
	History        []string  `json:"history"`
}

type DietaryPreference struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Eatery struct {
	ID             string   `json:"id"`
	Name           string   `json:"name"`
	Menu           []string `json:"menu"`
	Takeout        bool     `json:"takeout"`
	Booking        bool     `json:"booking"`
	Location       string   `json:"location"`
	Cuisine        string   `json:"cuisine"`
	ContactDetails string   `json:"contactDetails"`
	MenuItems      []*Meal  `json:"menuItems"`
}

type Favorite struct {
	ID        string    `json:"id"`
	User      *User     `json:"user"`
	Food      *Food     `json:"food"`
	Meal      *Meal     `json:"meal"`
	Timestamp time.Time `json:"timestamp"`
}

type Food struct {
	ID           string      `json:"id"`
	ImageURL     string      `json:"imageUrl"`
	CommonName   string      `json:"commonName"`
	Description  string      `json:"description"`
	FoodGroup    string      `json:"foodGroup"`
	LastUpdate   time.Time   `json:"lastUpdate"`
	Calories     *Calories   `json:"calories"`
	OtherNames   []*FoodName `json:"otherNames"`
	Sources      []*Source   `json:"sources"`
	Compounds    []*Compound `json:"compounds"`
	Nutrients    []*Nutrient `json:"nutrients"`
	RegionsFound []string    `json:"regionsFound"`
	Category     string      `json:"category"`
	ServingSize  string      `json:"servingSize"`
	Verified     bool        `json:"verified"`
}

type FoodName struct {
	Category string `json:"category"`
	Name     string `json:"name"`
}

type FoodNameInput struct {
	Category string `json:"category"`
	Name     string `json:"name"`
}

type Ingredient struct {
	Name   string `json:"name"`
	Amount string `json:"amount"`
}

type IngredientInput struct {
	Name   string `json:"name"`
	Amount string `json:"amount"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Meal struct {
	ID              string        `json:"id"`
	DocName         string        `json:"docName"`
	ImageURL        string        `json:"imageUrl"`
	CommonName      string        `json:"commonName"`
	Description     string        `json:"description"`
	LastUpdate      time.Time     `json:"lastUpdate"`
	Foods           []*Food       `json:"foods"`
	OtherNames      []string      `json:"otherNames"`
	Recipe          []*RecipeStep `json:"recipe"`
	Ingredients     []*Ingredient `json:"ingredients"`
	Cuisine         string        `json:"cuisine"`
	PreparationTime string        `json:"preparationTime"`
}

type Mutation struct {
}

type Nutrient struct {
	Name   string `json:"name"`
	Amount int    `json:"amount"`
}

type NutrientInput struct {
	Name   string `json:"name"`
	Amount int    `json:"amount"`
}

type Query struct {
}

type RecipeStep struct {
	Step        int    `json:"step"`
	Description string `json:"description"`
}

type RecipeStepInput struct {
	Step        int    `json:"step"`
	Description string `json:"description"`
}

type RegisterUserInput struct {
	Name            string `json:"name"`
	Email           string `json:"email"`
	Password        string `json:"password"`
	ConfirmPassword string `json:"confirmPassword"`
	Role            Role   `json:"role"`
}

type Source struct {
	Name    string `json:"name"`
	URLLink string `json:"urlLink"`
}

type SourceInput struct {
	Name    string `json:"name"`
	URLLink string `json:"urlLink"`
}

type UpdateEateryInput struct {
	Name           string   `json:"name"`
	Location       string   `json:"location"`
	Cuisine        string   `json:"cuisine"`
	ContactDetails string   `json:"contactDetails"`
	MenuItemIds    []string `json:"menuItemIds"`
}

type UpdateFoodInput struct {
	ImageURL     string           `json:"imageUrl"`
	CommonName   string           `json:"commonName"`
	Description  string           `json:"description"`
	FoodGroup    string           `json:"foodGroup"`
	Calories     *CaloriesInput   `json:"calories"`
	OtherNames   []*FoodNameInput `json:"otherNames"`
	Sources      []*SourceInput   `json:"sources"`
	Compounds    []*CompoundInput `json:"compounds"`
	Nutrients    []*NutrientInput `json:"nutrients"`
	RegionsFound []string         `json:"regionsFound"`
	Category     string           `json:"category"`
	ServingSize  string           `json:"servingSize"`
	Verified     bool             `json:"verified"`
}

type UpdateMealInput struct {
	DocName         string             `json:"docName"`
	ImageURL        string             `json:"imageUrl"`
	CommonName      string             `json:"commonName"`
	Description     string             `json:"description"`
	FoodIds         []string           `json:"foodIds"`
	OtherNames      []string           `json:"otherNames"`
	Recipe          []*RecipeStepInput `json:"recipe"`
	Ingredients     []*IngredientInput `json:"ingredients"`
	Cuisine         string             `json:"cuisine"`
	PreparationTime string             `json:"preparationTime"`
}

type UpdateUserInput struct {
	FullName             string    `json:"fullName"`
	Email                string    `json:"email"`
	AvatarURL            string    `json:"avatarUrl"`
	Gender               string    `json:"gender"`
	Weight               int       `json:"weight"`
	Dob                  time.Time `json:"dob"`
	Location             string    `json:"location"`
	Password             string    `json:"password"`
	Role                 Role      `json:"role"`
	DietaryPreferenceIds []string  `json:"dietaryPreferenceIds,omitempty"`
	AllergyIds           []string  `json:"allergyIds"`
	Height               int       `json:"height"`
	ActivityLevel        string    `json:"activityLevel"`
}

type User struct {
	ID          string      `json:"id"`
	FullName    string      `json:"fullName"`
	Email       string      `json:"email"`
	Password    string      `json:"password"`
	AvatarURL   string      `json:"avatarUrl"`
	Gender      string      `json:"gender"`
	LastOnline  time.Time   `json:"lastOnline"`
	Role        Role        `json:"role"`
	CreatedAt   time.Time   `json:"createdAt"`
	AccountType AccountType `json:"accountType"`
	Location    string      `json:"location"`
}

type AccountType string

const (
	AccountTypeIndividual AccountType = "INDIVIDUAL"
	AccountTypeBusiness   AccountType = "BUSINESS"
)

var AllAccountType = []AccountType{
	AccountTypeIndividual,
	AccountTypeBusiness,
}

func (e AccountType) IsValid() bool {
	switch e {
	case AccountTypeIndividual, AccountTypeBusiness:
		return true
	}
	return false
}

func (e AccountType) String() string {
	return string(e)
}

func (e *AccountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountType", str)
	}
	return nil
}

func (e AccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin     Role = "ADMIN"
	RoleDataEntry Role = "DATA_ENTRY"
	RoleCustomer  Role = "CUSTOMER"
	RoleEatery    Role = "EATERY"
)

var AllRole = []Role{
	RoleAdmin,
	RoleDataEntry,
	RoleCustomer,
	RoleEatery,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleDataEntry, RoleCustomer, RoleEatery:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
