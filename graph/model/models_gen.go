// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Allergy struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type AuthPayload struct {
	Token string `json:"token"`
}

type Calories struct {
	Amount int `json:"amount"`
}

type CaloriesInput struct {
	Amount int `json:"amount"`
}

type Compound struct {
	Name   string `json:"name"`
	Amount int    `json:"amount"`
}

type CompoundInput struct {
	Name   string `json:"name"`
	Amount int    `json:"amount"`
}

type CreateEateryInput struct {
	Name           string   `json:"name"`
	Location       string   `json:"location"`
	Cuisine        string   `json:"cuisine"`
	ContactDetails string   `json:"contactDetails"`
	MenuItemIds    []string `json:"menuItemIds"`
}

type CreateFoodInput struct {
	ImageURL     string           `json:"imageUrl"`
	CommonName   string           `json:"commonName"`
	Description  string           `json:"description"`
	FoodGroup    string           `json:"foodGroup"`
	Calories     *CaloriesInput   `json:"calories"`
	OtherNames   []*FoodNameInput `json:"otherNames"`
	Sources      []*SourceInput   `json:"sources"`
	Compounds    []*CompoundInput `json:"compounds"`
	Nutrients    []*NutrientInput `json:"nutrients"`
	RegionsFound []string         `json:"regionsFound"`
	Category     string           `json:"category"`
	ServingSize  string           `json:"servingSize"`
	Verified     bool             `json:"verified"`
}

type CreateMealInput struct {
	DocName         string             `json:"docName"`
	ImageURL        string             `json:"imageUrl"`
	CommonName      string             `json:"commonName"`
	Description     string             `json:"description"`
	FoodIds         []string           `json:"foodIds"`
	OtherNames      []string           `json:"otherNames"`
	Recipe          []*RecipeStepInput `json:"recipe"`
	Ingredients     []*IngredientInput `json:"ingredients"`
	Cuisine         string             `json:"cuisine"`
	PreparationTime string             `json:"preparationTime"`
}

type DietaryPreference struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Eatery struct {
	ID             string  `json:"id"`
	Name           string  `json:"name"`
	Location       string  `json:"location"`
	Cuisine        string  `json:"cuisine"`
	ContactDetails string  `json:"contactDetails"`
	MenuItems      []*Meal `json:"menuItems"`
}

type Favorite struct {
	ID        string    `json:"id"`
	User      *User     `json:"user"`
	Food      *Food     `json:"food"`
	Meal      *Meal     `json:"meal"`
	Timestamp time.Time `json:"timestamp"`
}

type Food struct {
	ID           string      `json:"id"`
	ImageURL     string      `json:"imageUrl"`
	CommonName   string      `json:"commonName"`
	Description  string      `json:"description"`
	FoodGroup    string      `json:"foodGroup"`
	LastUpdate   time.Time   `json:"lastUpdate"`
	Calories     *Calories   `json:"calories"`
	OtherNames   []*FoodName `json:"otherNames"`
	Sources      []*Source   `json:"sources"`
	Compounds    []*Compound `json:"compounds"`
	Nutrients    []*Nutrient `json:"nutrients"`
	RegionsFound []string    `json:"regionsFound"`
	Category     string      `json:"category"`
	ServingSize  string      `json:"servingSize"`
	Verified     bool        `json:"verified"`
}

type FoodName struct {
	Category string `json:"category"`
	Name     string `json:"name"`
}

type FoodNameInput struct {
	Category string `json:"category"`
	Name     string `json:"name"`
}

type Ingredient struct {
	Name   string `json:"name"`
	Amount string `json:"amount"`
}

type IngredientInput struct {
	Name   string `json:"name"`
	Amount string `json:"amount"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Meal struct {
	ID              string        `json:"id"`
	DocName         string        `json:"docName"`
	ImageURL        string        `json:"imageUrl"`
	CommonName      string        `json:"commonName"`
	Description     string        `json:"description"`
	LastUpdate      time.Time     `json:"lastUpdate"`
	Foods           []*Food       `json:"foods"`
	OtherNames      []string      `json:"otherNames"`
	Recipe          []*RecipeStep `json:"recipe"`
	Ingredients     []*Ingredient `json:"ingredients"`
	Cuisine         string        `json:"cuisine"`
	PreparationTime string        `json:"preparationTime"`
}

type Mutation struct {
}

type Nutrient struct {
	Name   string `json:"name"`
	Amount int    `json:"amount"`
}

type NutrientInput struct {
	Name   string `json:"name"`
	Amount int    `json:"amount"`
}

type Query struct {
}

type RecipeStep struct {
	Step        int    `json:"step"`
	Description string `json:"description"`
}

type RecipeStepInput struct {
	Step        int    `json:"step"`
	Description string `json:"description"`
}

type RegisterUserInput struct {
	FullName             string    `json:"fullName"`
	Email                string    `json:"email"`
	AvatarURL            string    `json:"avatarUrl"`
	Gender               string    `json:"gender"`
	Weight               int       `json:"weight"`
	Dob                  time.Time `json:"dob"`
	Location             string    `json:"location"`
	Password             string    `json:"password"`
	ConfirmPassword      string    `json:"confirmPassword"`
	Role                 Role      `json:"role"`
	DietaryPreferenceIds []string  `json:"dietaryPreferenceIds"`
	AllergyIds           []string  `json:"allergyIds"`
	Height               int       `json:"height"`
	ActivityLevel        string    `json:"activityLevel"`
}

type Source struct {
	Name    string `json:"name"`
	URLLink string `json:"urlLink"`
}

type SourceInput struct {
	Name    string `json:"name"`
	URLLink string `json:"urlLink"`
}

type UpdateEateryInput struct {
	Name           string   `json:"name"`
	Location       string   `json:"location"`
	Cuisine        string   `json:"cuisine"`
	ContactDetails string   `json:"contactDetails"`
	MenuItemIds    []string `json:"menuItemIds"`
}

type UpdateFoodInput struct {
	ImageURL     string           `json:"imageUrl"`
	CommonName   string           `json:"commonName"`
	Description  string           `json:"description"`
	FoodGroup    string           `json:"foodGroup"`
	Calories     *CaloriesInput   `json:"calories"`
	OtherNames   []*FoodNameInput `json:"otherNames"`
	Sources      []*SourceInput   `json:"sources"`
	Compounds    []*CompoundInput `json:"compounds"`
	Nutrients    []*NutrientInput `json:"nutrients"`
	RegionsFound []string         `json:"regionsFound"`
	Category     string           `json:"category"`
	ServingSize  string           `json:"servingSize"`
	Verified     bool             `json:"verified"`
}

type UpdateMealInput struct {
	DocName         string             `json:"docName"`
	ImageURL        string             `json:"imageUrl"`
	CommonName      string             `json:"commonName"`
	Description     string             `json:"description"`
	FoodIds         []string           `json:"foodIds"`
	OtherNames      []string           `json:"otherNames"`
	Recipe          []*RecipeStepInput `json:"recipe"`
	Ingredients     []*IngredientInput `json:"ingredients"`
	Cuisine         string             `json:"cuisine"`
	PreparationTime string             `json:"preparationTime"`
}

type UpdateUserInput struct {
	FullName             string    `json:"fullName"`
	Email                string    `json:"email"`
	AvatarURL            string    `json:"avatarUrl"`
	Gender               string    `json:"gender"`
	Weight               int       `json:"weight"`
	Dob                  time.Time `json:"dob"`
	Location             string    `json:"location"`
	Password             string    `json:"password"`
	Role                 Role      `json:"role"`
	DietaryPreferenceIds []string  `json:"dietaryPreferenceIds,omitempty"`
	AllergyIds           []string  `json:"allergyIds"`
	Height               int       `json:"height"`
	ActivityLevel        string    `json:"activityLevel"`
}

type User struct {
	ID                 string               `json:"id"`
	FullName           string               `json:"fullName"`
	Email              string               `json:"email"`
	AvatarURL          string               `json:"avatarUrl"`
	Gender             string               `json:"gender"`
	Weight             int                  `json:"weight"`
	LastOnline         time.Time            `json:"lastOnline"`
	Dob                time.Time            `json:"dob"`
	Location           string               `json:"location"`
	Password           string               `json:"password"`
	Role               Role                 `json:"role"`
	DietaryPreferences []*DietaryPreference `json:"dietaryPreferences"`
	Allergies          []*Allergy           `json:"allergies"`
	Height             int                  `json:"height"`
	ActivityLevel      string               `json:"activityLevel"`
	Favorites          []*Favorite          `json:"favorites"`
}

type Role string

const (
	RoleUser          Role = "USER"
	RoleAdmin         Role = "ADMIN"
	RoleNutritionist  Role = "NUTRITIONIST"
	RoleFoodsupplier  Role = "FOODSUPPLIER"
	RoleEaterymanager Role = "EATERYMANAGER"
)

var AllRole = []Role{
	RoleUser,
	RoleAdmin,
	RoleNutritionist,
	RoleFoodsupplier,
	RoleEaterymanager,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleAdmin, RoleNutritionist, RoleFoodsupplier, RoleEaterymanager:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
