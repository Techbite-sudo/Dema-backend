package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"Dema-backend/engine/users"
	"Dema-backend/graph/model"
	"context"
	"fmt"
)

// RegisterUser is the resolver for the RegisterUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.RegisterUserInput) (*model.AuthPayload, error) {
	return users.ValidateRegistration(input)
}

// Login is the resolver for the Login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	return users.Login(input)
}

// CreateFood is the resolver for the CreateFood field.
func (r *mutationResolver) CreateFood(ctx context.Context, input model.CreateFoodInput) (*model.Food, error) {
	panic(fmt.Errorf("not implemented: CreateFood - CreateFood"))
}

// UpdateFood is the resolver for the UpdateFood field.
func (r *mutationResolver) UpdateFood(ctx context.Context, id string, input model.UpdateFoodInput) (*model.Food, error) {
	panic(fmt.Errorf("not implemented: UpdateFood - UpdateFood"))
}

// DeleteFood is the resolver for the DeleteFood field.
func (r *mutationResolver) DeleteFood(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteFood - DeleteFood"))
}

// CreateMeal is the resolver for the CreateMeal field.
func (r *mutationResolver) CreateMeal(ctx context.Context, input model.CreateMealInput) (*model.Meal, error) {
	panic(fmt.Errorf("not implemented: CreateMeal - CreateMeal"))
}

// UpdateMeal is the resolver for the UpdateMeal field.
func (r *mutationResolver) UpdateMeal(ctx context.Context, id string, input model.UpdateMealInput) (*model.Meal, error) {
	panic(fmt.Errorf("not implemented: UpdateMeal - UpdateMeal"))
}

// DeleteMeal is the resolver for the DeleteMeal field.
func (r *mutationResolver) DeleteMeal(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteMeal - DeleteMeal"))
}

// UpdateUser is the resolver for the UpdateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - UpdateUser"))
}

// DeleteUser is the resolver for the DeleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - DeleteUser"))
}

// CreateEatery is the resolver for the CreateEatery field.
func (r *mutationResolver) CreateEatery(ctx context.Context, input model.CreateEateryInput) (*model.Eatery, error) {
	panic(fmt.Errorf("not implemented: CreateEatery - CreateEatery"))
}

// UpdateEatery is the resolver for the UpdateEatery field.
func (r *mutationResolver) UpdateEatery(ctx context.Context, id string, input model.UpdateEateryInput) (*model.Eatery, error) {
	panic(fmt.Errorf("not implemented: UpdateEatery - UpdateEatery"))
}

// DeleteEatery is the resolver for the DeleteEatery field.
func (r *mutationResolver) DeleteEatery(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEatery - DeleteEatery"))
}

// AddFavorite is the resolver for the AddFavorite field.
func (r *mutationResolver) AddFavorite(ctx context.Context, userID string, foodID string, mealID string) (*model.Favorite, error) {
	panic(fmt.Errorf("not implemented: AddFavorite - AddFavorite"))
}

// RemoveFavorite is the resolver for the RemoveFavorite field.
func (r *mutationResolver) RemoveFavorite(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveFavorite - RemoveFavorite"))
}

// FetchUser is the resolver for the FetchUser field.
func (r *queryResolver) FetchUser(ctx context.Context, token string) (*model.User, error) {
	return users.FetchUser(token)
}

// FetchFoods is the resolver for the FetchFoods field.
func (r *queryResolver) FetchFoods(ctx context.Context) ([]*model.Food, error) {
	panic(fmt.Errorf("not implemented: FetchFoods - FetchFoods"))
}

// FetchFood is the resolver for the FetchFood field.
func (r *queryResolver) FetchFood(ctx context.Context, id string) (*model.Food, error) {
	panic(fmt.Errorf("not implemented: FetchFood - FetchFood"))
}

// FetchMeals is the resolver for the FetchMeals field.
func (r *queryResolver) FetchMeals(ctx context.Context) ([]*model.Meal, error) {
	panic(fmt.Errorf("not implemented: FetchMeals - FetchMeals"))
}

// FetchMeal is the resolver for the FetchMeal field.
func (r *queryResolver) FetchMeal(ctx context.Context, id string) (*model.Meal, error) {
	panic(fmt.Errorf("not implemented: FetchMeal - FetchMeal"))
}

// FetchAllUsers is the resolver for the FetchAllUsers field.
func (r *queryResolver) FetchAllUsers(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: FetchAllUsers - FetchAllUsers"))
}

// FetchUserByID is the resolver for the FetchUserById field.
func (r *queryResolver) FetchUserByID(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: FetchUserByID - FetchUserById"))
}

// FetchEateries is the resolver for the FetchEateries field.
func (r *queryResolver) FetchEateries(ctx context.Context) ([]*model.Eatery, error) {
	panic(fmt.Errorf("not implemented: FetchEateries - FetchEateries"))
}

// FetchEatery is the resolver for the FetchEatery field.
func (r *queryResolver) FetchEatery(ctx context.Context, id string) (*model.Eatery, error) {
	panic(fmt.Errorf("not implemented: FetchEatery - FetchEatery"))
}

// FetchDietaryPreferences is the resolver for the FetchDietaryPreferences field.
func (r *queryResolver) FetchDietaryPreferences(ctx context.Context) ([]*model.DietaryPreference, error) {
	panic(fmt.Errorf("not implemented: FetchDietaryPreferences - FetchDietaryPreferences"))
}

// FetchAllergies is the resolver for the FetchAllergies field.
func (r *queryResolver) FetchAllergies(ctx context.Context) ([]*model.Allergy, error) {
	panic(fmt.Errorf("not implemented: FetchAllergies - FetchAllergies"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
